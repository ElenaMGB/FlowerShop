from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from model_utils import FieldTracker
# from config import ADMIN_TELEGRAM_ID
from django.contrib.auth.models import User


class Category(models.Model):
    name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    description = models.TextField(blank=True, null=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'


class Product(models.Model):
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    image = models.ImageField(upload_to='products/', blank=True, verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')

    def __str__(self):
        return self.name

# class Cart(models.Model):
#     user = models.ForeignKey(User, on_delete=models.CASCADE)
#     created_at = models.DateTimeField(auto_now_add=True)
#
#     def __str__(self):
#         return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.full_name}"
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(self.user, 'profile') and self.user.profile.full_name:
            full_name = self.user.profile.full_name
        else:
            full_name = self.user.username
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {full_name}"


class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.quantity} x {self.product.name}"


class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    products = models.ManyToManyField(Product, through='OrderItem', verbose_name='–¶–≤–µ—Ç—ã')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    address = models.TextField()
    status = models.CharField(
        max_length=20,
        choices=[
            ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
            ('completed', '–ó–∞–≤–µ—Ä—à—ë–Ω')
        ],
        default='pending',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )
    order_key = models.CharField(max_length=20, unique=True, verbose_name='–ö–ª—é—á –∑–∞–∫–∞–∑–∞')
    payment_status = models.CharField(max_length=50, default='pending')
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ total_price
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–±—â–∞—è —Å—É–º–º–∞')
    tracker = FieldTracker(fields=['status'])

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.id} ({self.user.username})"


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, verbose_name='–ó–∞–∫–∞–∑')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–¶–≤–µ—Ç—ã')
    quantity = models.PositiveIntegerField(default=1, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"


import logging
logger = logging.getLogger(__name__)

@receiver(post_save, sender=Order)
def create_order_notification(sender, instance, created, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
    if created or instance.tracker.has_changed('status'):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        order_items = OrderItem.objects.filter(order=instance)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        items_text = "\n".join([
            f"‚Ä¢ {item.product.name} x{item.quantity}: {item.price * item.quantity} —Ä—É–±."
            for item in order_items
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_message = (
            f"üå∏ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{instance.id}</b> üå∏\n\n"
            f"<b>–î–∞—Ç–∞:</b> {instance.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {instance.get_status_display()}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {instance.address}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
            f"<b>–ò—Ç–æ–≥–æ:</b> {instance.total_price} —Ä—É–±.\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        if created:
            client_message += "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
        elif instance.tracker.has_changed('status'):
            client_message += f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{instance.get_status_display()}</b>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ)
        admin_message = (
            f"üå∏ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{instance.id}</b> üå∏\n\n"
            f"<b>–î–∞—Ç–∞:</b> {instance.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {instance.user.username}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {getattr(instance, 'phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {instance.address}\n\n"
            # f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
            f"<b>–ò—Ç–æ–≥–æ:</b> {instance.total_price} —Ä—É–±."
        )

        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å Telegram
        try:
            telegram_user = TelegramUser.objects.get(user=instance.user)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            TelegramNotification.objects.create(
                telegram_id=telegram_user.telegram_id,
                message_text=client_message
            )
            print(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {instance.user.username}")
        except TelegramUser.DoesNotExist:
            print(f"Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {instance.user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # 2. –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_TELEGRAM_ID –∏–∑ config
            from FlowersDelivery.config import ADMIN_TELEGRAM_ID

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            TelegramNotification.objects.create(
                telegram_id=ADMIN_TELEGRAM_ID,
                message_text=admin_message
            )
            print(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫–∞–∑–µ #{instance.id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
# –û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
# @receiver(post_save, sender=Order)
# def create_order_notification(sender, instance, created, **kwargs):
#     """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
#     if created or instance.tracker.has_changed('status'):
#         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
#         order_items = OrderItem.objects.filter(order=instance)
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
#         items_text = "\n".join([
#             f"‚Ä¢ <b>{item.product.name}</b> x{item.quantity}: {item.price * item.quantity} —Ä—É–±."
#             for item in order_items
#         ])
#
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
#         order_date = instance.created_at.strftime("%d.%m.%Y")
#         order_time = instance.created_at.strftime("%H:%M")
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#         message_text = (
#             f"üå∏ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{instance.id}</b> üå∏\n\n"
#             f"<b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {order_date}\n"
#             f"<b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {order_time}\n"
#             f"<b>–°—Ç–∞—Ç—É—Å:</b> {instance.get_status_display()}\n"
#             f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {instance.address}\n\n"
#             f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
#             f"<b>–ò—Ç–æ–≥–æ:</b> {instance.total_price} —Ä—É–±.\n\n"
#         )
#
#         # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
#         if not created and instance.tracker.has_changed('status'):
#             message_text += f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> {instance.get_status_display()}\n\n"
#
#         message_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
#
#         # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         telegram_user = None
#         try:
#             telegram_user = TelegramUser.objects.get(user=instance.user)
#         except TelegramUser.DoesNotExist:
#             print(f"Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {instance.user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             return
#
#         # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
#         TelegramNotification.objects.create(
#             telegram_id=telegram_user.telegram_id,
#             message_text=message_text
#         )
#
#         # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
#         # (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
#         admin_telegram_id = 123456789  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#
#         # –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         admin_message = (
#             f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{instance.id}</b> üîî\n\n"
#             f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {instance.user.username}\n"
#             f"<b>–î–∞—Ç–∞:</b> {order_date} {order_time}\n"
#             f"<b>–ê–¥—Ä–µ—Å:</b> {instance.address}\n\n"
#             f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
#             f"<b>–ò—Ç–æ–≥–æ:</b> {instance.total_price} —Ä—É–±."
#         )
#
#         # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         try:
#             TelegramNotification.objects.create(
#                 telegram_id=admin_telegram_id,
#                 message_text=admin_message
#             )
#         except:
#             pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω

class TelegramUser(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram"""
    telegram_id = models.BigIntegerField(primary_key=True, verbose_name='ID Telegram')
    username = models.CharField(max_length=100, blank=True, null=True, verbose_name='Username –≤ Telegram')
    first_name = models.CharField(max_length=100, blank=True, null=True)
    last_name = models.CharField(max_length=100, blank=True, null=True)
    user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, blank=True,
                                related_name='telegram_profile', verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–π—Ç–∞')
    verification_code = models.CharField(max_length=20, blank=True, null=True, verbose_name='–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Telegram: {self.telegram_id} ({self.username or 'No username'})"

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram"


class TelegramNotification(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç"""
    id = models.AutoField(primary_key=True)
    telegram_id = models.BigIntegerField(verbose_name='ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ Telegram')
    message_text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    sent = models.BooleanField(default=False, verbose_name='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    sent_at = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.telegram_id} ({self.sent and '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' or '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})"

    class Meta:
        verbose_name = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram"
        verbose_name_plural = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram"