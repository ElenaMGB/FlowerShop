from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
import requests
from model_utils import FieldTracker


from django.contrib.auth.models import User

class Product(models.Model):
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    image = models.ImageField(upload_to='products/', blank=True, verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    # category = models.CharField(max_length=100, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')

    def __str__(self):
        return self.name


class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.full_name}"


class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.quantity} x {self.product.name}"


class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    products = models.ManyToManyField(Product, through='OrderItem', verbose_name='–¶–≤–µ—Ç—ã')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    address = models.TextField()
    status = models.CharField(
        max_length=20,
        choices=[
            ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
            ('completed', '–ó–∞–≤–µ—Ä—à—ë–Ω')
        ],
        default='pending',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )
    order_key = models.CharField(max_length=20, unique=True, verbose_name='–ö–ª—é—á –∑–∞–∫–∞–∑–∞')
    payment_status = models.CharField(max_length=50, default='pending')
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ total_price
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–±—â–∞—è —Å—É–º–º–∞')
    tracker = FieldTracker(fields=['status'])

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.id} ({self.user.username})"


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, verbose_name='–ó–∞–∫–∞–∑')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–¶–≤–µ—Ç—ã')
    quantity = models.PositiveIntegerField(default=1, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"


@receiver(post_save, sender=Order)
def create_order_notification(sender, instance, created, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
    if created or instance.tracker.has_changed('status'):  # –ù—É–∂–µ–Ω django-model-utils –¥–ª—è tracker
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        order_items = OrderItem.objects.filter(order=instance)
        items_text = "\n".join([f"- {item.product.name} x{item.quantity}: {item.price * item.quantity} —Ä—É–±."
                                for item in order_items])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üå∏ <b>–ó–∞–∫–∞–∑ #{instance.id}</b> üå∏\n\n"
            f"<b>–î–∞—Ç–∞:</b> {instance.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {instance.get_status_display()}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {instance.address}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
            f"<b>–ò—Ç–æ–≥–æ:</b> {instance.total_price} —Ä—É–±.\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not created and instance.tracker.has_changed('status'):
            message_text += f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> {instance.get_status_display()}\n\n"

        message_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!"

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = None
        try:
            telegram_user = TelegramUser.objects.get(user=instance.user)
        except TelegramUser.DoesNotExist:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {instance.user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        TelegramNotification.objects.create(
            telegram_id=telegram_user.telegram_id,
            message_text=message_text
        )
# @receiver(post_save, sender=Order)
# def notify_bot_about_status_change(sender, instance, **kwargs):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
#     if instance._status_before_update != instance.status:
#         data = {
#             'telegram_id': 1367180406,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
#             'order_id': instance.id,
#             'new_status': instance.status,
#             'total_price': float(instance.total_price),
#         }
#         try:
#             # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É
#             response = requests.post('http://127.0.0.1:8080/notify/', json=data)
#             response.raise_for_status()
#         except requests.RequestException as e:
#             # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# @receiver(post_save, sender=Order)
# def notify_bot_about_status_change(sender, instance, created, **kwargs):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."""
#     if created:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
#         # –í—ã—á–∏—Å–ª—è–µ–º total_price –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
#         order_items = OrderItem.objects.filter(order=instance)
#         total_price = sum(item.price * item.quantity for item in order_items)
#
#         data = {
#             'telegram_id': 1367180406,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
#             'order_id': instance.id,
#             'new_status': instance.status,
#             'total_price': float(total_price),
#         }
#         try:
#             # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É
#             response = requests.post('http://127.0.0.1:8080/notify/', json=data)
#             response.raise_for_status()
#         except requests.RequestException as e:
#             # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


class TelegramUser(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram"""
    telegram_id = models.BigIntegerField(primary_key=True, verbose_name='ID Telegram')
    username = models.CharField(max_length=100, blank=True, null=True, verbose_name='Username –≤ Telegram')
    first_name = models.CharField(max_length=100, blank=True, null=True)
    last_name = models.CharField(max_length=100, blank=True, null=True)
    user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, blank=True,
                                related_name='telegram_profile', verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–π—Ç–∞')
    verification_code = models.CharField(max_length=20, blank=True, null=True, verbose_name='–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Telegram: {self.telegram_id} ({self.username or 'No username'})"

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram"


class TelegramNotification(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç"""
    id = models.AutoField(primary_key=True)
    telegram_id = models.BigIntegerField(verbose_name='ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ Telegram')
    message_text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    sent = models.BooleanField(default=False, verbose_name='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    sent_at = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.telegram_id} ({self.sent and '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' or '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})"

    class Meta:
        verbose_name = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram"
        verbose_name_plural = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram"